---
import Hero from "@/components/Hero.astro";
import Credits from "@/images/cookbook.credits.astro";
import cookbook from "@/images/cookbook.jpg";
import Layout from "@/layouts/Layout.astro";
import { getDadJoke } from "@/utils/get-dad-joke";

export const prerender = false;

const dadJoke = await getDadJoke();
---

<Layout>
  <Hero image={cookbook} alt="Bookshelve with cookbook"><Credits /></Hero>
  <h1>Astro PWA Cookbook</h1>
  <p>Welcome to the unofficial Astro PWA cookbook.</p>
  <p>
    <a href="/cookbook">These recipes</a> will show you, how to create a
    <a href="https://web.dev/articles/what-are-pwas">Progressive Web App</a>
     with <a href="/https://astro.build/">Astro</a> and <a
      href="https://vite-pwa-org.netlify.app/">Vite-PWA</a
    >, including offline support (even for SSR pages), push notifications and
    more.
  </p>
  <p>
    <a href="/recipe/generate-sw">Get started</a>
     with the most basic installable PWA with offline support, that simply
    caches all static pages, using <code>generateSW</code> strategy.
  </p>
  <p>
    This website is a PWA, to demonstrate the fantastic possibilities that you
    have when creating your PWA with Astro. It is a hybrid app, with some static
    pages and some rendered server-side. Nevertheless, most of it's
    functionality is also available offline. So enjoy this Dad joke, that will
    be updated server-side on every page reload (while you are online):
  </p>
  <blockquote>
    {dadJoke}
    <footer>
      <cite>Dad</cite>
    </footer>
  </blockquote>
  <p>
    If you are interested in my journey of implementing this prototype to
    develop the recipe, I wrote a <a href="/journal">journal</a> about it.
  </p>
</Layout>
